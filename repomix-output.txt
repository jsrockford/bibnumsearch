This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-09-01T01:04:15.794Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.cursorindexingignore
.gitignore
.specstory/.gitignore
bible.py
bibnumsearch.py
documentation/envrionment_notes.txt
documentation/requirements-dev-current.txt
functions.py
gunicorn_config.py
requirements-base.txt
requirements-dev.txt
requirements-testvm.txt
templates/index.html
templates/report_template.html
tools/build_data.py
tools/debug_data.py
wsgi.py

================================================================
Repository Files
================================================================

================
File: .cursorindexingignore
================
# Don't index SpecStory auto-save files, but allow explicit context inclusion via @ references
.specstory/**

================
File: .gitignore
================
# Python Virtual Environment
venv/
.venv/

# Python cache
__pycache__/
*.pyc

# Other common files to ignore
.env
*.log

# ignore Repomix output files

================
File: .specstory/.gitignore
================
# SpecStory explanation file
/.what-is-this.md

================
File: bible.py
================
# Bible Number Lookup program to be renamed better later
# Program takes 2-6 digit user number input then returns "Book Chapter:Verse - Text" formatted results
# This script is modified 'main.py' for Flask use on website to accept one input then return answer
# bible.py

import json
from functions import convert_to_search, test_match

# --- DATA LOADING (This happens once when the app starts) ---
# We're loading the efficient JSON data into a dictionary called 'bible_lookup'.
print("Loading Bible lookup data from bible_lookup.json...")
try:
    # Open the file and use json.load() to create the dictionary
    with open('bible_lookup.json', 'r') as f:
        bible_lookup = json.load(f)
    print("Bible data loaded successfully.")
except FileNotFoundError:
    print("\nFATAL ERROR: 'bible_lookup.json' was not found!")
    print("Please run 'build_data.py' to create it before starting the app.\n")
    bible_lookup = {} # Define as empty to prevent a crash
# --- END DATA LOADING ---


def scriptures(my_number):
    """
    This is the main function called by your web server.
    """
    # 1. Convert the user's number (e.g., "316") into potential search keys (e.g., ["3:16"])
    src_numbers = convert_to_search(my_number)

    # 2. Pass those keys AND the loaded bible_lookup data to the search function
    answer = test_match(src_numbers, bible_lookup)

    return answer

================
File: bibnumsearch.py
================
from flask import Flask, request, render_template, jsonify, Response
from weasyprint import HTML
import bible  # assuming my_script.py is the name of your Python script

app = Flask(__name__)

#app.config['APPLICATION_ROOT'] = '/app'

@app.route('/submit', methods=['POST'])
def submit():
        my_number = request.form['my_number']
        result = bible.scriptures(my_number)
        return jsonify(result)

@app.route('/bible')
def bible_route():
        return render_template('index.html')

@app.route('/')
def root_route():
    return render_template('index.html')

@app.route('/download')
def download_pdf():
    # 1. Get the search number from the URL (e.g., ?number=911)
    search_number = request.args.get('number', '')
    if not search_number:
        # Handle cases where no number is provided
        return "Error: No search number provided.", 400

    # 2. Get the Bible verse results again using your existing logic
    results = bible.scriptures(search_number)

    # 3. Render the dedicated PDF template into an HTML string
    #    We pass the results and the search term to the template
    html_for_pdf = render_template('report_template.html', results=results, search_term=search_number)

    # 4. Use WeasyPrint to convert the HTML string into a PDF in memory
    pdf_bytes = HTML(string=html_for_pdf).write_pdf()

    # 5. Create a Flask Response to send the PDF back to the user
    return Response(
        pdf_bytes,
        mimetype='application/pdf',
        headers={'Content-Disposition': f'attachment;filename=results-{search_number}.pdf'}
    )


if __name__ == '__main__':
        app.run(host='0.0.0.0', debug=True)

================
File: documentation/envrionment_notes.txt
================
To run dev flask web server in IDE:

In Terminal set environmental variable:
set FLASK_APP=app.py

Then run:
flask run
* Running on http://127.0.0.1:5000

-------------------------------------

Useful Command Line GIT Commands:
    Remove Directory from GIT Tracking Index: git rm -r --cached __pycache__
    Commit: git commit -m "Remove __pycache__ directories from tracking"
    Push: git push 
    Pull (execute from project root Directory): git pull 

git reset --hard HEAD
```*   `reset --hard` discards all local changes and modifications.
*   `HEAD` tells it to reset to the state of the very last commit.
Your local repository is now clean, so the pull will work without any conflicts.

================
File: documentation/requirements-dev-current.txt
================
blinker==1.6.2
Brotli==1.1.0
cffi==1.17.1
click==8.1.3
colorama==0.4.6
cssselect2==0.8.0
Flask==2.3.1
fonttools==4.59.2
gunicorn==20.1.0
importlib-metadata==6.6.0
itsdangerous==2.1.2
Jinja2==3.1.2
MarkupSafe==2.1.2
pillow==11.3.0
pycparser==2.22
pydyf==0.11.0
pyphen==0.17.2
tinycss2==1.4.0
tinyhtml5==2.0.0
weasyprint==66.0
webencodings==0.5.1
Werkzeug==2.3.0
zipp==3.15.0
zopfli==0.2.3.post1

================
File: functions.py
================
from data import *

def validate_input(user_input):
    if user_input.isdigit():
        if 2 <= len(user_input) <= 6:
            return True
        else:
            print("Please number 2 to 6 digits only!\n")
            return False
    else:
        print("Please enter only number 2 to 6 digits in length!\n")
        return False


# Converts user entered numbers to chapt:verse combos LIST
def convert_to_search(user_input):
    # separate digits into LIST
    num_list = []
    for i in user_input:
        num_list.append(i)

    tmp_results = []
    search_src = []
    for i in range(0, len(num_list)-1):
        tmp_list = num_list.copy()
        if i < len(num_list):
            tmp_list.insert(i + 1, ":")
            tmp_results.append(tmp_list)
            i += 1

    # code to join results into one string per entry
    a = 0
    s = ""
    while a < len(tmp_results):
        tmp_hold = tmp_results[a]
        s = "".join(tmp_hold)
        search_src.append(s)
        a += 1

    return search_src     # returns list of formatted scriptures to use in Bible search


def test_match(test_numbers, bible_lookup):
    """
    Searches for verses by doing a fast dictionary lookup.
    'test_numbers' is a list like ['1:1', '11:1'].
    'bible_lookup' is the dictionary loaded from the JSON file.
    """
    matches = []
    # Loop through the potential search keys (e.g., '1:1', '11:1', etc.)
    for num_key in test_numbers:
        
        # Use .get() to look up the key in the dictionary.
        # This will return a LIST of verses (e.g., [["Genesis", "..."], ["Exodus", "..."]])
        # or it will return None if the key is not found.
        list_of_verses = bible_lookup.get(num_key)

        # If the key was found, list_of_verses will not be None.
        if list_of_verses:
            # Now, loop through every verse that was found for that key.
            for verse_data in list_of_verses:
                book = verse_data[0]
                text = verse_data[1]

                # Build the HTML link for this specific verse and add it to our final list.
                verse_str = f'<a href="https://biblehub.com/{book.lower().replace(" ", "_")}/{num_key.replace(":", "-")}.htm" target="_blank">{book} {num_key}</a> - {text}'
                matches.append(verse_str)

    return matches

================
File: gunicorn_config.py
================
bind = "0.0.0.0:8000"
workers = 4
errorlog = "/home/don/log/gunicorn_error.log"

================
File: requirements-base.txt
================
Flask
gunicorn

================
File: requirements-dev.txt
================
# requirements-dev.txt

# Include the base requirements
-r requirements-base.txt

# Development-specific versions for Windows (Newer Python)
weasyprint

================
File: requirements-testvm.txt
================
# requirements-testvm.txt

# Include the base requirements
-r requirements-base.txt

# Production-specific versions for Ubuntu (Python 3.8)
weasyprint==61.2
pydyf==0.10.0

================
File: templates/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-6RYVK3F6G9"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-6RYVK3F6G9');
  </script>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Find Bible verses by number quickly and easily with 911 Bible. We search through all the possible chapter:verse combinations in the Bible and return a list of every chapter:verse along with the book name that matches your query.">
  <title>911 Bible: Find Bible Verses by Number</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    nav {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: #96c0eb;
      padding: 20px;
    }
    nav a {
      color: #212529;
      font-size: 24px;
      /* font-weight: bold; */
    }
    .row {
      display: flex;
      justify-content: space-between;
      margin: 20px;
    }
    h2 {
      font-size: 22px;
      font-weight: bold;
      margin-bottom: 20px;
    }
    p {
      font-size: 18px;
      line-height: 1.5;
    }
    img {
      max-width: 100%;
      height: auto;
    }
    footer {
      background-color: #212529;
      color: #fff;
      text-align: center;
      padding: 20px;
    }

    .container {
      margin-top: 50px;
      }

    nav div a {
      font-size: 18px;
    }

    header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
  }
  nav li {
    margin-left: 10px;
  }

  </style>
</head>
<body>

  <!-- <header> -->
    <div>
      <nav>
        <a href="https://don-gray.com">Don's Thoughts and Stuff - 911 Bible App</a>
        <div>
          <ul>
            <li>
              <a href="https://don-gray.com">Home</a>
            </li>
            <li>
              <a href="https://www.don-gray.com/contact/">Contact</a>
            </li>
          </ul>
        </div>
      </nav>
    </div>
  <!-- </header> -->


  <!--Two Columns-->
  <div class="container" style=“margin-top: 50px; padding: 30px;”>
    <div class="row align-items-center">
      <div class="col-md-6">
        <div>
          <h2>911 Bible App</h2>
          <p>Enter a number that has 2 to 6 digits. 911 Bible App will find every combination of Bible verses that match all or part of your number then print them onscreen for you. For example, if you enter '911' the program will find all verses in the Bible that are '9:11' or '91:1' including the relative Book name. Results will be displayed in the King James Version but each result will include a clickable link to the Bible Hub page that shows multiple versions of the verse.</p>
          <p>For an explanation of why I created this project and what it does, please read my blog post <i><a href="https://www.don-gray.com/2023/04/25/why-i-wrote-bible-verse-number-search/">"Why I Wrote the 911 Bible App."</i></a></p>
          <p></p>
          <div style="text-align: right;">
            <button class="btn btn-primary" style="margin-top: 4px; font-size: 18px;" onclick="window.open('https://pathinternational.co/ethiopia-sponsorship/', '_blank')">Sponsor A Child</button>
          </div>
          

        </div>
      </div>
      <div class="col-md-6">
        <div>
          <img src="{{ url_for('static', filename='bible.jpg') }}" alt="Bible" class="img-fluid">
          <p style="margin-top: 20px;"><i>If you've been blessed by this service, please consider giving to the Path Ministries Ethiopian Orphans project. PATH has been operating in Uganda for several years, providing education and safe accomodations for children. They have recently exanded into Ethiopia. I hope you'll take time to check them out and sponsor a child!</i> <br>
            <span style="font-size: 0.8em;">[NOTE: I am not affiliated with PATH Ministries but am a supporter of their work.]</span></p>
        </div>
      </div>
    </div>
  </div>

  <hr style="width: 75%; text-align: center;">


  <!-- Form -->
  <div class="d-flex justify-content-center" style="margin-top: 50px;">
    <form action="/submit" method="POST" style="width: 50%;">
      <div class="form-group">
        <label for="myNumber" style="font-size: 22px;">Enter Number (2 to 6 digits):</label>
        <input type="text" class="form-control" id="myNumber" name="my_number" pattern="[0-9]{2,6}" required oninvalid="this.setCustomValidity('Please enter a number between 2 and 6 digits')" oninput="this.setCustomValidity('')">
      </div>
      <button type="submit" class="btn btn-primary" id="submit-button" style="margin-top: 10px; font-size: 24px;">Submit</button>
      <button type="button" class="btn btn-danger" id="clear-button" style="margin-top: 10px; font-size: 24px; margin-left: 15px;">Clear</button>
      <a href="#" class="btn btn-success" id="download-button" role="button" style="margin-top: 10px; font-size: 24px; margin-left: 15px; display: none;">Download PDF</a>
    </form>
  </div>

  <!-- Spacer -->
  <!-- <div style="height: 50px;"></div> -->

  <div class="container">
    <div class="row">
      <div class="col-md-12">
        <h1 id="results-header" class="mb-4" style="display:none; text-align: center; font-size: 36px;">Results</h1>
        <div id="result" style="text-align: left;"></div>
      </div>
    </div>
  </div>

  <hr style="width: 75%; text-align: center;">


  <!-- Spacer
  <div style="height: 50px;"></div> -->

  <div class="d-flex justify-content-center" style="margin-top: 25px; padding: 20px; width: 100%;">
    <div style="width: 50%;">
      If you find bugs to report or have questions, please click on <a href="https://www.don-gray.com/contact/">Contact</a> and I will do my best to get back to you.
    </div>
  </div>
  

  <footer>
    <div>
      <div>
        <div>
          <div>
            <p>&copy; 2023 Don's Thoughts and Stuff - Bible Verse Number Search</p>
          </div>
        </div>
      </div>
    </div>
  </footer>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script>
    const form = document.querySelector('form');
    const resultDiv = document.querySelector('#result');
    const resultsHeader = document.getElementById('results-header');
    const numberInput = document.getElementById('myNumber');
    const clearButton = document.getElementById('clear-button');
    const downloadButton = document.getElementById('download-button'); // Get the new download button

    // --- Submit button logic ---
    form.addEventListener('submit', event => {
        event.preventDefault();
        const formData = new FormData(form);
        fetch('/submit', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(result => {
            let html = '';
            for (const item of result) {
                html += `<p style="font-size: 24px;">${item}</p>`;
            }

            // Update and show the results header
            resultsHeader.innerHTML = `Results for ${numberInput.value}`;
            resultsHeader.style.display = 'block';

            // Update the download button's link and make it visible
            downloadButton.href = `/download?number=${numberInput.value}`;
            downloadButton.style.display = 'inline-block'; // Show the button

            // Display the results
            resultDiv.innerHTML = html;
            numberInput.value = '';
        });
    });

    // --- Clear button logic ---
    clearButton.addEventListener('click', () => {
        resultDiv.innerHTML = '';
        resultsHeader.style.display = 'none';
        numberInput.value = '';
        downloadButton.style.display = 'none'; // Hide the download button
        downloadButton.href = '#'; // Reset its link
    });
</script>

</body>
</html>

================
File: templates/report_template.html
================
<!DOCTYPE html>
<html>
<head>
    <title>Search Results</title>
    <style>
        /* Styles optimized for a printed document */
        body { font-family: sans-serif; margin: 2em; }
        h1 { font-size: 20pt; }
        p { font-size: 12pt; margin-bottom: 1em; }
        a { color: black; text-decoration: none; } /* Links might not be clickable, so make them look like text */
    </style>
</head>
<body>
    <h1>Bible Number Search Results for "{{ search_term }}"</h1>
    <hr>
    
    {% if results %}
        {% for verse in results %}
            <p>{{ verse|safe }}</p>
        {% endfor %}
    {% else %}
        <p>No results found.</p>
    {% endif %}

</body>
</html>

================
File: tools/build_data.py
================
# Build the bible lookup file with the correct structure 
# One time use script to build the bible_lookup.json file


import json
from data import kjv_text

print("Starting to build the bible lookup file with the correct structure...")
bible_lookup = {}

# We will use a standard for loop to handle the logic correctly
for entry in kjv_text:
    # First, validate the line to avoid errors
    if len(entry) == 3:
        book = entry[0]
        chapter_verse = entry[1]
        text = entry[2]
        
        # This is the key logic:
        # setdefault(key, []) gets the list at the key, or creates a new empty list if it's not there.
        # Then, .append() adds the new verse to that list.
        bible_lookup.setdefault(chapter_verse, []).append([book, text])

# Now, write this correctly structured dictionary to a JSON file
with open('bible_lookup.json', 'w') as json_file:
    json.dump(bible_lookup, json_file, indent=2) # No indent for a smaller, more efficient file

print(f"Successfully created bible_lookup.json with {len(bible_lookup)} unique chapter:verse keys.")

================
File: tools/debug_data.py
================
# Debug the data.py file with the correct structure 



try:
    from data import kjv_text
except ImportError:
    print("Error: Could not find data.py. Make sure this script is in the same folder.")
    exit()

print("--- Starting scan of kjv_text in data.py ---")

error_count = 0
malformed_entries = []

# Enumerate provides both the index and the item, which is perfect for this task.
for index, entry in enumerate(kjv_text):
    # An entry is considered valid if it is a list with exactly 3 string elements.
    # We will check if it's NOT a list or if its length is NOT 3.
    if not isinstance(entry, list) or len(entry) != 3:
        error_count += 1
        # Store the index and the problematic data for a clean report at the end.
        malformed_entries.append({'index': index, 'content': entry})

print("\n--- Scan Complete ---")

# Print the final report.
if error_count == 0:
    print("✅ Success! No malformed entries were found.")
else:
    print(f"❌ Found {error_count} malformed entries. Details below:")
    for error in malformed_entries:
        # The line number in the file is usually the index + 2, because of
        # the 'kjv_text = (' line at the top of the file.
        approx_line = error['index'] + 2
        print(f"\n  - Problem Entry at Index: {error['index']} (approx. line {approx_line} in data.py)")
        print(f"    Content: {error['content']}")
        print(f"    Reason: The entry is not a list containing exactly 3 items.")

print("-" * 25)

================
File: wsgi.py
================
from bibnumsearch import app

if __name__ == "__main__":
        app.run()
